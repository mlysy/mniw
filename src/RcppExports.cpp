// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// CrossProdV
Eigen::MatrixXd CrossProdV(Eigen::MatrixXd X, Eigen::MatrixXd V, int p, int q, bool inverse);
RcppExport SEXP mniw_CrossProdV(SEXP XSEXP, SEXP VSEXP, SEXP pSEXP, SEXP qSEXP, SEXP inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    __result = Rcpp::wrap(CrossProdV(X, V, p, q, inverse));
    return __result;
END_RCPP
}
// LogDensityMultivariateNormal
Eigen::VectorXd LogDensityMultivariateNormal(Eigen::MatrixXd X, Eigen::MatrixXd Mu, Eigen::MatrixXd V);
RcppExport SEXP mniw_LogDensityMultivariateNormal(SEXP XSEXP, SEXP MuSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type V(VSEXP);
    __result = Rcpp::wrap(LogDensityMultivariateNormal(X, Mu, V));
    return __result;
END_RCPP
}
// LogDensityMatrixNormal
Eigen::VectorXd LogDensityMatrixNormal(Eigen::MatrixXd X, Eigen::MatrixXd Mu, Eigen::MatrixXd RowV, Eigen::MatrixXd ColV);
RcppExport SEXP mniw_LogDensityMatrixNormal(SEXP XSEXP, SEXP MuSEXP, SEXP RowVSEXP, SEXP ColVSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type RowV(RowVSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type ColV(ColVSEXP);
    __result = Rcpp::wrap(LogDensityMatrixNormal(X, Mu, RowV, ColV));
    return __result;
END_RCPP
}
// GenerateMultivariateNormal
Eigen::MatrixXd GenerateMultivariateNormal(int N, Eigen::MatrixXd Lambda, Eigen::MatrixXd Sigma);
RcppExport SEXP mniw_GenerateMultivariateNormal(SEXP NSEXP, SEXP LambdaSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Sigma(SigmaSEXP);
    __result = Rcpp::wrap(GenerateMultivariateNormal(N, Lambda, Sigma));
    return __result;
END_RCPP
}
// GenerateMatrixNormal
Eigen::MatrixXd GenerateMatrixNormal(int N, Eigen::MatrixXd Lambda, Eigen::MatrixXd RowSigma, Eigen::MatrixXd ColSigma);
RcppExport SEXP mniw_GenerateMatrixNormal(SEXP NSEXP, SEXP LambdaSEXP, SEXP RowSigmaSEXP, SEXP ColSigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type RowSigma(RowSigmaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type ColSigma(ColSigmaSEXP);
    __result = Rcpp::wrap(GenerateMatrixNormal(N, Lambda, RowSigma, ColSigma));
    return __result;
END_RCPP
}
// GenerateMatrixNIW
List GenerateMatrixNIW(int N, Eigen::MatrixXd Lambda, Eigen::MatrixXd Sigma, Eigen::MatrixXd Psi, Eigen::VectorXd nu, bool inverse);
RcppExport SEXP mniw_GenerateMatrixNIW(SEXP NSEXP, SEXP LambdaSEXP, SEXP SigmaSEXP, SEXP PsiSEXP, SEXP nuSEXP, SEXP inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    __result = Rcpp::wrap(GenerateMatrixNIW(N, Lambda, Sigma, Psi, nu, inverse));
    return __result;
END_RCPP
}
// GenerateRandomEffectsNormal
Eigen::MatrixXd GenerateRandomEffectsNormal(int N, Eigen::MatrixXd lambda, Eigen::MatrixXd y, Eigen::MatrixXd V, Eigen::MatrixXd A);
RcppExport SEXP mniw_GenerateRandomEffectsNormal(SEXP NSEXP, SEXP lambdaSEXP, SEXP ySEXP, SEXP VSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type V(VSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    __result = Rcpp::wrap(GenerateRandomEffectsNormal(N, lambda, y, V, A));
    return __result;
END_RCPP
}
// HierUneqVModelGibbs
List HierUneqVModelGibbs(int nSamples, int nBurn, Eigen::MatrixXd Y, Eigen::MatrixXd X, Eigen::MatrixXd V, Eigen::MatrixXd Lambda, Eigen::MatrixXd Omega, Eigen::MatrixXd Psi, double nu, bool updateBetaSigma, bool updateMu, bool storeBetaSigma, bool storeMu);
RcppExport SEXP mniw_HierUneqVModelGibbs(SEXP nSamplesSEXP, SEXP nBurnSEXP, SEXP YSEXP, SEXP XSEXP, SEXP VSEXP, SEXP LambdaSEXP, SEXP OmegaSEXP, SEXP PsiSEXP, SEXP nuSEXP, SEXP updateBetaSigmaSEXP, SEXP updateMuSEXP, SEXP storeBetaSigmaSEXP, SEXP storeMuSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nSamples(nSamplesSEXP);
    Rcpp::traits::input_parameter< int >::type nBurn(nBurnSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type V(VSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type updateBetaSigma(updateBetaSigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type updateMu(updateMuSEXP);
    Rcpp::traits::input_parameter< bool >::type storeBetaSigma(storeBetaSigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type storeMu(storeMuSEXP);
    __result = Rcpp::wrap(HierUneqVModelGibbs(nSamples, nBurn, Y, X, V, Lambda, Omega, Psi, nu, updateBetaSigma, updateMu, storeBetaSigma, storeMu));
    return __result;
END_RCPP
}
// LogDensityWishart
Eigen::VectorXd LogDensityWishart(Eigen::MatrixXd X, Eigen::MatrixXd Psi, Eigen::VectorXd nu, bool inverse);
RcppExport SEXP mniw_LogDensityWishart(SEXP XSEXP, SEXP PsiSEXP, SEXP nuSEXP, SEXP inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    __result = Rcpp::wrap(LogDensityWishart(X, Psi, nu, inverse));
    return __result;
END_RCPP
}
// GenerateWishart
Eigen::MatrixXd GenerateWishart(int N, Eigen::MatrixXd Psi, Eigen::VectorXd nu, bool inverse);
RcppExport SEXP mniw_GenerateWishart(SEXP NSEXP, SEXP PsiSEXP, SEXP nuSEXP, SEXP inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    __result = Rcpp::wrap(GenerateWishart(N, Psi, nu, inverse));
    return __result;
END_RCPP
}
